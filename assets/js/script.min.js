$(document).ready(function(){var e=this,i=$("body");function n(){window.vh=e.documentElement.clientHeight,window.vw=e.documentElement.clientWidth,window.wh=$(window).height(),window.ww=$(window).width(),window.dh=$(document).height(),window.dw=$(document).width(),window.vmin=vh>vw?vw:vh,window.vmax=vh<vw?vw:vh,vw<1024?i.addClass("mobile"):i.removeClass("mobile")}e.ontouchstart?(window.touchAvail=!0,i.addClass("touch")):(window.touchAvail=!1,i.removeClass("touch")),n(),function(){var e=sessionStorage.getItem("activeSectionClass");if(!+e)return;var i=$(".side-nav").children().length-1,n=e;x(n),y(0,n,i)}();var o=i.find(".work"),t=i.find(".hire"),s=t.children(".hire__wrapper"),r=i.find(".about"),a=(i.find(".contact"),i.find("input, textarea")),l=$("#contact__popup");$(".side-nav li, .outer-nav li").click(function(){if(!$(this).hasClass("is-active")){var e=$(this),i=e.parent().find(".is-active"),n=e.parent().children().index(i),o=e.parent().children().index(e),t=$(this).parent().children().length-1;x(o),y(n,o,t)}}),$(".cta").click(function(){var e=$(this);e.hasClass("cta--contact")?l.removeClass("off"):e.hasClass("cta--about")?I(2):e.hasClass("cta--hire")&&I(4)});var d=!0,c=null;$(this).on("mousewheel DOMMouseScroll",function(e){if(!$(".outer-nav").hasClass("is-vis")){e.preventDefault();var i=e.originalEvent.wheelDelta?-e.originalEvent.wheelDelta:20*e.originalEvent.detail;i>50&&d?(d=!1,clearTimeout(c),c=setTimeout(function(){d=!0},1e3),S(1)):i<-50&&d&&(d=!1,clearTimeout(c),c=setTimeout(function(){d=!0},1e3),S(-1))}});var u,v,f,h,w,p,m,g=document.getElementById("viewport"),C=new Hammer(g);function S(e){var i=$(".side-nav").find(".is-active"),n=$(".side-nav").children().index(i),o=$(".side-nav").children().length-1,t=0;"swipeup"===e.type||40===e.keyCode||e>0?n!==o?(x(t=n+1),y(n,t,o)):(x(t),y(n,t,o)):("swipedown"===e.type||38===e.keyCode||e<0)&&(0!==n?(x(t=n-1),y(n,t,o)):(x(t=o),y(n,t,o)))}function x(e){$(".side-nav, .outer-nav").children().removeClass("is-active"),$(".side-nav").children().eq(e).addClass("is-active"),$(".outer-nav").children().eq(e).addClass("is-active")}function y(e,i,n){sessionStorage.setItem("activeSectionClass",i),$(".main-content").children().removeClass("section--is-active"),$(".main-content").children().eq(i).addClass("section--is-active"),$(".main-content .section").children().removeClass("section--next section--prev"),e===n&&0===i||0===e&&i===n?$(".main-content .section").children().removeClass("section--next section--prev"):e<i?$(".main-content").children().eq(e).children().addClass("section--next"):$(".main-content").children().eq(e).children().addClass("section--prev"),0!==i&&i!==n?$(".header--cta").addClass("is-active"):$(".header--cta").removeClass("is-active")}function I(e){var i=$(".side-nav").find(".is-active"),n=$(".side-nav").children().index(i),o=$(".side-nav").children().length-1,t=e;x(e),y(n,t,o)}function _(e,i){return e/100*window[i]}function k(){var e=i.find(".l-viewport"),n=o.find(".work__lockup"),t=n.find(".outer-slider"),s=n.find(".inner-slider__item-image-container");e.css({height:_(100,"vh")+"px"}),t.css({height:_(75,"vmin")+"px"}),s.css({height:_(40,"vmin")+"px"}),vw>767&&s.css({height:_(25,"vmin")+"px"}),vw,vw>1199&&t.css({height:_(55,"vmin")+"px"}),vw<400&&s.css({height:_(35,"vmin")+"px"}),vw>vh&&(s.css({"min-height":"auto"}),vw<1200&&vw>vh&&s.css({height:_(30,"vmin")+"px"}))}C.get("swipe").set({direction:Hammer.DIRECTION_VERTICAL}),C.on("swipeup swipedown",function(e){S(e)}),$(document).keyup(function(e){$(".outer-nav").hasClass("is-vis")||(e.preventDefault(),S(e))}),$(window).on("resize",function(){n(),k()}),$(window).on("load",function(){window.hireWrapperHeight=s.height(),window.setInterval(function(){console.log(hireWrapperHeight)},3e3)}),$(".header--nav-toggle").click(function(){$(".perspective").addClass("perspective--modalview"),setTimeout(function(){$(".perspective").addClass("effect-rotate-left--animate")},25),$(".outer-nav, .outer-nav li, .outer-nav--return").addClass("is-vis")}),$(".outer-nav--return, .outer-nav li").click(function(){$(".perspective").removeClass("effect-rotate-left--animate"),setTimeout(function(){$(".perspective").removeClass("perspective--modalview")},400),$(".outer-nav, .outer-nav li, .outer-nav--return").removeClass("is-vis")}),u=r.find(".slider"),v=r.find(".about--options a"),f=new Swiper(u,{init:!0,loop:!0,loopedSlides:4,speed:1500,slidesPerView:"auto",centeredSlides:!0,normalizeSlideIndex:!0,direction:"horizontal",effect:"fade",normalizeSlideIndex:!0,fadeEffect:{crossFade:!0},controller:{by:"slide"}}),v.on("click",function(){var e=$(this).data("slide");f.slideTo(Number(e),1500)}),function(){var e,i=o.find(".outer-slider"),n=o.find(".inner-slider"),t=o.find(".inner-slider__nav--prev"),s=o.find(".inner-slider__nav--next"),r=o.find(".outer-slider__controls"),a=o.find(".outer-slider__nav--prev"),l=o.find(".outer-slider__nav--next"),d=new Swiper(i,{init:!1,loop:!0,loopedSlides:4,slidesPerView:"auto",centeredSlides:!0,normalizeSlideIndex:!0,direction:"vertical",allowTouchMove:!1,effect:"slide",normalizeSlideIndex:!0,controller:{by:"slide"}});d.on("init",function(){console.log("swiper initialized"),e=d.activeIndex,console.log("currentInnerSwiperIndex: "+e)}),d.init();var c,u,v=new Swiper(r,{effect:"slide",normalizeSlideIndex:!0,direction:"horizontal",centeredSlides:!0,loop:!0,loopedSlides:4,slidesPerView:"auto",spaceBetween:35,touchRatio:.2,slideToClickedSlide:!0,normalizeSlideIndex:!0,navigation:{nextEl:l,prevEl:a},controller:{by:"slide"},breakpoints:{700:{slidesPerView:"auto",spaceBetween:0}}});v.controller.control=d,d.controller.control=v,new Swiper(n,{direction:"horizontal",loop:!0,spaceBetween:0,slidesPerView:"auto",loopedSlides:7,loopAdditionalSlides:10,centeredSlides:!0,spaceBetween:0,effect:"coverflow",coverflowEffect:{rotate:40,stretch:0,depth:100,modifier:1,slideShadows:!0},normalizeSlideIndex:!0,slideToClickedSlide:!0}),s.add(t).on("click touchstart",function(i){var n=$(this);if("touchstart"==i.type&&(c=!0,setTimeout(function(){c=!1},400)),!c||"click"!=i.type){var o=d.slides[e],t=$(o).find(".inner-slider")[0];t.swiper,n.hasClass("inner-slider__prev")?t.swiper.slidePrev(400):t.swiper.slideNext(400)}}),d.on("transitionEnd",function(){u||(u=!0,console.log("changed"),e=d.activeIndex,console.log("currentInnerSwiperIndex: "+e),window.setTimeout(function(){u=void 0},200))})}(),a.focusout(function(){""===$(this).val()?$(this).removeClass("has-value"):$(this).addClass("has-value"),window.scrollTo(0,0)}),a.on("focusin",function(){console.log("focusin"),i.addClass("form-field-focused"),s.css({minHeight:hireWrapperHeight+"px"}),t.on("mousewheel DOMMouseScroll",function(e){e.stopPropagation()})}),a.on("focusout",function(){console.log("focusout"),i.removeClass("form-field-focused"),s.css({minHeight:"auto"}),t.off("mousewheel DOMMouseScroll")}),h=$("#startProjectForm"),$("#nameSP"),w=$("#emailSP"),p=$("#service-web"),m=p.closest(".work-request--services"),h.parsley({requiredMessage:"This field is required"}),w.parsley({typeMessage:"Enter a valid e-mail address"}),p.parsley({requiredMessage:"Please select the digital service/s you want us to work on",errorsContainer:function(e){return m},classHandler:function(e){return m}}),h.parsley().on("form:error",function(){alert("validation errors")}).on("form:submit",function(e){return console.log("Hire Form Submitted"),!1}),function(){var e=l,i=e.find("#close-contact-form"),n=e.find("form"),o=e.find("#emailCF");console.log(e),e.on("mousewheel DOMMouseScroll",function(e){console.log(e),e.stopPropagation()});var t=document.getElementById("viewport"),s=new Hammer(t);s.get("swipe").set({direction:Hammer.DIRECTION_VERTICAL}),s.on("swipeup swipedown",function(e){console.log(e)}),i.on("click",function(){e.toggleClass("off")}),n.parsley({requiredMessage:"This field is required"}),o.parsley({typeMessage:"Enter a valid e-mail address"}),n.parsley().on("form:error",function(){alert("validation errors")}).on("form:submit",function(e){return console.log("Contact Form Submitted"),!1})}(),k()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
