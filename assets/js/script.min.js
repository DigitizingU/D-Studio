$(document).ready(function(){var e=this,t=$("body");function i(){window.vh=e.documentElement.clientHeight,window.vw=e.documentElement.clientWidth,window.wh=$(window).height(),window.ww=$(window).width(),window.dh=$(document).height(),window.dw=$(document).width(),window.vmin=vh>vw?vw:vh,window.vmax=vh<vw?vw:vh,vw<1024?t.addClass("mobile"):t.removeClass("mobile")}e.ontouchstart?(window.touchAvail=!0,t.addClass("touch")):(window.touchAvail=!1,t.removeClass("touch")),i(),function(){var e=sessionStorage.getItem("activeSectionClass");if(!+e)return;var i=$(".side-nav").children().length-1,n=e;x(n),y(0,n,i)}();var v=t.find(".work"),n=t.find(".hire"),o=n.children(".hire__wrapper"),s=t.find(".about"),r=(t.find(".contact"),t.find("input, textarea")),a=$("#contact__popup");$(".side-nav li, .outer-nav li").click(function(){if(!$(this).hasClass("is-active")){var e=$(this),i=e.parent().find(".is-active"),n=e.parent().children().index(i),o=e.parent().children().index(e),t=$(this).parent().children().length-1;x(o),y(n,o,t)}}),$(".cta").click(function(){var e=$(this);e.hasClass("cta--contact")?a.removeClass("off"):e.hasClass("cta--about")?I(2):e.hasClass("cta--hire")&&I(4)});var l=!0,d=null;$(this).on("mousewheel DOMMouseScroll",function(e){if(!$(".outer-nav").hasClass("is-vis")){e.preventDefault();var i=e.originalEvent.wheelDelta?-e.originalEvent.wheelDelta:20*e.originalEvent.detail;50<i&&l?(l=!1,clearTimeout(d),d=setTimeout(function(){l=!0},1e3),S(1)):i<-50&&l&&(l=!1,clearTimeout(d),d=setTimeout(function(){l=!0},1e3),S(-1))}});var c,u,f,h,w,p,m,g=document.getElementById("viewport"),C=new Hammer(g);function S(e){var i=$(".side-nav").find(".is-active"),n=$(".side-nav").children().index(i),o=$(".side-nav").children().length-1,t=0;"swipeup"===e.type||40===e.keyCode||0<e?(x(n!==o?t=n+1:t),y(n,t,o)):("swipedown"===e.type||38===e.keyCode||e<0)&&(x(t=0!==n?n-1:o),y(n,t,o))}function x(e){$(".side-nav, .outer-nav").children().removeClass("is-active"),$(".side-nav").children().eq(e).addClass("is-active"),$(".outer-nav").children().eq(e).addClass("is-active")}function y(e,i,n){sessionStorage.setItem("activeSectionClass",i),$(".main-content").children().removeClass("section--is-active"),$(".main-content").children().eq(i).addClass("section--is-active"),$(".main-content .section").children().removeClass("section--next section--prev"),e===n&&0===i||0===e&&i===n?$(".main-content .section").children().removeClass("section--next section--prev"):e<i?$(".main-content").children().eq(e).children().addClass("section--next"):$(".main-content").children().eq(e).children().addClass("section--prev"),0!==i&&i!==n?$(".header--cta").addClass("is-active"):$(".header--cta").removeClass("is-active")}function I(e){var i=$(".side-nav").find(".is-active"),n=$(".side-nav").children().index(i),o=$(".side-nav").children().length-1,t=e;x(e),y(n,t,o)}function _(e,i){return e/100*window[i]}function k(){var e=t.find(".l-viewport"),i=v.find(".work__lockup"),n=i.find(".outer-slider"),o=i.find(".inner-slider__item-image-container");e.css({height:_(100,"vh")+"px"}),n.css({height:_(75,"vmin")+"px"}),o.css({height:_(40,"vmin")+"px"}),767<vw&&o.css({height:_(25,"vmin")+"px"}),vw,1199<vw&&n.css({height:_(55,"vmin")+"px"}),vw<400&&o.css({height:_(35,"vmin")+"px"}),vw>vh&&(o.css({"min-height":"auto"}),vw<1200&&vw>vh&&o.css({height:_(30,"vmin")+"px"}))}C.get("swipe").set({direction:Hammer.DIRECTION_VERTICAL}),C.on("swipeup swipedown",function(e){S(e)}),$(document).keyup(function(e){$(".outer-nav").hasClass("is-vis")||(e.preventDefault(),S(e))}),$(window).on("resize",function(){i(),k()}),$(window).on("load",function(){window.hireWrapperHeight=o.height(),window.setInterval(function(){console.log(hireWrapperHeight)},3e3)}),$(".header--nav-toggle").click(function(){$(".perspective").addClass("perspective--modalview"),setTimeout(function(){$(".perspective").addClass("effect-rotate-left--animate")},25),$(".outer-nav, .outer-nav li, .outer-nav--return").addClass("is-vis")}),$(".outer-nav--return, .outer-nav li").click(function(){$(".perspective").removeClass("effect-rotate-left--animate"),setTimeout(function(){$(".perspective").removeClass("perspective--modalview")},400),$(".outer-nav, .outer-nav li, .outer-nav--return").removeClass("is-vis")}),c=s.find(".slider"),u=s.find(".about--options a"),f=new Swiper(c,{init:!0,loop:!0,loopedSlides:4,speed:1500,slidesPerView:"auto",centeredSlides:!0,normalizeSlideIndex:!0,direction:"horizontal",effect:"fade",normalizeSlideIndex:!0,fadeEffect:{crossFade:!0},controller:{by:"slide"}}),u.on("click",function(){var e=$(this).data("slide");f.slideTo(Number(e),1500)}),function(){var t,e=v.find(".outer-slider"),i=v.find(".inner-slider"),n=v.find(".inner-slider__nav--prev"),o=v.find(".inner-slider__nav--next"),s=v.find(".outer-slider__controls"),r=v.find(".outer-slider__nav--prev"),a=v.find(".outer-slider__nav--next"),l=new Swiper(e,{init:!1,loop:!0,loopedSlides:4,slidesPerView:"auto",centeredSlides:!0,normalizeSlideIndex:!0,direction:"vertical",allowTouchMove:!1,effect:"slide",normalizeSlideIndex:!0,controller:{by:"slide"}});l.on("init",function(){console.log("swiper initialized"),t=l.activeIndex,console.log("currentInnerSwiperIndex: "+t)}),l.init();var d,c,u=new Swiper(s,{effect:"slide",normalizeSlideIndex:!0,direction:"horizontal",centeredSlides:!0,loop:!0,loopedSlides:4,slidesPerView:"auto",spaceBetween:35,touchRatio:.2,slideToClickedSlide:!0,normalizeSlideIndex:!0,navigation:{nextEl:a,prevEl:r},controller:{by:"slide"},breakpoints:{700:{slidesPerView:"auto",spaceBetween:0}}});(u.controller.control=l).controller.control=u,new Swiper(i,{direction:"horizontal",loop:!0,spaceBetween:0,slidesPerView:"auto",loopedSlides:7,loopAdditionalSlides:10,centeredSlides:!0,spaceBetween:0,effect:"coverflow",coverflowEffect:{rotate:40,stretch:0,depth:100,modifier:1,slideShadows:!0},normalizeSlideIndex:!0,slideToClickedSlide:!0}),o.add(n).on("click touchstart",function(e){var i=$(this);if("touchstart"==e.type&&(d=!0,setTimeout(function(){d=!1},400)),!d||"click"!=e.type){var n=l.slides[t],o=$(n).find(".inner-slider")[0];o.swiper;i.hasClass("inner-slider__prev")?o.swiper.slidePrev(400):o.swiper.slideNext(400)}}),l.on("transitionEnd",function(){c||(c=!0,console.log("changed"),t=l.activeIndex,console.log("currentInnerSwiperIndex: "+t),window.setTimeout(function(){c=void 0},200))})}(),r.focusout(function(){""===$(this).val()?$(this).removeClass("has-value"):$(this).addClass("has-value"),window.scrollTo(0,0)}),r.on("focusin",function(){console.log("focusin"),t.addClass("form-field-focused"),o.css({minHeight:hireWrapperHeight+"px"}),n.on("mousewheel DOMMouseScroll",function(e){e.stopPropagation()})}),r.on("focusout",function(){console.log("focusout"),t.removeClass("form-field-focused"),o.css({minHeight:"auto"}),n.off("mousewheel DOMMouseScroll")}),h=$("#startProjectForm"),$("#nameSP"),w=$("#emailSP"),p=$("#service-web"),m=p.closest(".work-request--services"),h.parsley({requiredMessage:"This field is required"}),w.parsley({typeMessage:"Enter a valid e-mail address"}),p.parsley({requiredMessage:"Please select the digital service/s you want us to work on",errorsContainer:function(e){return m},classHandler:function(e){return m}}),h.parsley().on("form:error",function(){alert("validation errors")}).on("form:submit",function(e){return console.log("Hire Form Submitted"),!1}),function(){var e=a,i=e.find("#close-contact-form"),n=e.find("form"),o=e.find("#emailCF");console.log(e),e.on("mousewheel DOMMouseScroll",function(e){console.log(e),e.stopPropagation()});var t=document.getElementById("viewport"),s=new Hammer(t);s.get("swipe").set({direction:Hammer.DIRECTION_VERTICAL}),s.on("swipeup swipedown",function(e){console.log(e)}),i.on("click",function(){e.toggleClass("off")}),n.parsley({requiredMessage:"This field is required"}),o.parsley({typeMessage:"Enter a valid e-mail address"}),n.parsley().on("form:error",function(){alert("validation errors")}).on("form:submit",function(e){return console.log("Contact Form Submitted"),!1})}(),k()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsIiRkb2N1bWVudCIsInRoaXMiLCJib2R5Iiwidmlld3BvcnREaW1lbnNpb25zIiwid2luZG93IiwidmgiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJ2dyIsImNsaWVudFdpZHRoIiwid2giLCJoZWlnaHQiLCJ3dyIsIndpZHRoIiwiZGgiLCJkdyIsInZtaW4iLCJ2bWF4IiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIm9udG91Y2hzdGFydCIsInRvdWNoQXZhaWwiLCJsYXN0S25vd25Qb3MiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJsYXN0SXRlbSIsImNoaWxkcmVuIiwibGVuZ3RoIiwibmV4dFBvcyIsInVwZGF0ZU5hdnMiLCJ1cGRhdGVDb250ZW50IiwidXBkYXRlVG9MYXN0UG9zIiwid29yayIsImZpbmQiLCJoaXJlIiwiaGlyZVdyYXBwZXIiLCJhYm91dCIsImZvcm1GaWVsZHMiLCJjb250YWN0UG9wdXAiLCJjbGljayIsImhhc0NsYXNzIiwiJHRoaXMiLCJjdXJBY3RpdmUiLCJwYXJlbnQiLCJjdXJQb3MiLCJpbmRleCIsImNoYW5nZVNsaWRlVG8iLCJjYW5TY3JvbGwiLCJzY3JvbGxDb250cm9sbGVyIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJ3aGVlbERlbHRhIiwiZGV0YWlsIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInVwZGF0ZUhlbHBlciIsImFib3V0U2xpZGVyIiwib3B0aW9ucyIsInN3aXBlciIsInN0YXJ0UHJvamVjdEZvcm0iLCJlbWFpbEZpZWxkIiwid2ViU2VydmljZUZpZWxkIiwic2VydmljZXNDb250IiwidGFyZ2V0RWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwibWMiLCJIYW1tZXIiLCJwYXJhbSIsInR5cGUiLCJrZXlDb2RlIiwiZXEiLCJzZXRJdGVtIiwidXBkYXRlVG8iLCJnZXRWaWV3cG9ydEJhc2VkSFciLCJwZXJjZW50YWdlIiwidW5pdCIsImFwcGx5Vmlld3BvcnRIZWlnaHRzIiwibF92aWV3cG9ydCIsIndvcmtfX2xvY2t1cCIsIm91dGVyU2xpZGVyIiwiaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIiLCJjc3MiLCJtaW4taGVpZ2h0IiwiZ2V0Iiwic2V0IiwiZGlyZWN0aW9uIiwiRElSRUNUSU9OX1ZFUlRJQ0FMIiwia2V5dXAiLCJoaXJlV3JhcHBlckhlaWdodCIsInNldEludGVydmFsIiwiY29uc29sZSIsImxvZyIsIlN3aXBlciIsImluaXQiLCJsb29wIiwibG9vcGVkU2xpZGVzIiwic3BlZWQiLCJzbGlkZXNQZXJWaWV3IiwiY2VudGVyZWRTbGlkZXMiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiZWZmZWN0IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImNvbnRyb2xsZXIiLCJieSIsInNsaWRlIiwiZGF0YSIsInNsaWRlVG8iLCJOdW1iZXIiLCJjdXJyZW50SW5uZXJTd2lwZXJJbmRleCIsImlubmVyU2xpZGVyIiwiaW5uZXJTbGlkZXJQcmV2QnRuIiwiaW5uZXJTbGlkZXJOZXh0QnRuIiwib3V0ZXJTbGlkZXJDb250cm9scyIsIm91dGVyU2xpZGVyUHJldkJ0biIsIm91dGVyU2xpZGVyTmV4dEJ0biIsIm91dGVyU3dpcGVyIiwiYWxsb3dUb3VjaE1vdmUiLCJhY3RpdmVJbmRleCIsInRvdWNoIiwib3V0ZXJTd2lwZXJUcmlnZ2VyIiwib3V0ZXJTd2lwZXJDb250cm9scyIsInNwYWNlQmV0d2VlbiIsInRvdWNoUmF0aW8iLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsImJyZWFrcG9pbnRzIiwiNzAwIiwiY29udHJvbCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwiY292ZXJmbG93RWZmZWN0Iiwicm90YXRlIiwic3RyZXRjaCIsImRlcHRoIiwibW9kaWZpZXIiLCJzbGlkZVNoYWRvd3MiLCJhZGQiLCJjdXJJbm5lclN3aXBlckNvbnQiLCJzbGlkZXMiLCJjdXJJbm5lclN3aXBlciIsInNsaWRlUHJldiIsInNsaWRlTmV4dCIsInVuZGVmaW5lZCIsIndvcmtTbGlkZXIiLCJmb2N1c291dCIsInZhbCIsInNjcm9sbFRvIiwibWluSGVpZ2h0Iiwic3RvcFByb3BhZ2F0aW9uIiwib2ZmIiwiY2xvc2VzdCIsInBhcnNsZXkiLCJyZXF1aXJlZE1lc3NhZ2UiLCJ0eXBlTWVzc2FnZSIsImVycm9yc0NvbnRhaW5lciIsIkZpZWxkIiwiY2xhc3NIYW5kbGVyIiwiYWxlcnQiLCJwb3B1cCIsImNsb3NlIiwiY29udGFjdEZvcm0iLCJ0b2dnbGVDbGFzcyJdLCJtYXBwaW5ncyI6IkFBRUFBLEVBQUFDLFVBQUFDLE1BQUEsV0FFQSxJQUFBQyxFQUFBQyxLQUNBQyxFQUFBTCxFQUFBLFFBeUJBLFNBQUFNLElBRUFDLE9BQUFDLEdBQUFMLEVBQUFNLGdCQUFBQyxhQUNBSCxPQUFBSSxHQUFBUixFQUFBTSxnQkFBQUcsWUFDQUwsT0FBQU0sR0FBQWIsRUFBQU8sUUFBQU8sU0FDQVAsT0FBQVEsR0FBQWYsRUFBQU8sUUFBQVMsUUFDQVQsT0FBQVUsR0FBQWpCLEVBQUFDLFVBQUFhLFNBQ0FQLE9BQUFXLEdBQUFsQixFQUFBQyxVQUFBZSxRQUNBVCxPQUFBWSxLQUFBWCxHQUFBRyxHQUFBQSxHQUFBSCxHQUNBRCxPQUFBYSxLQUFBWixHQUFBRyxHQUFBQSxHQUFBSCxHQUlBRyxHQUFBLEtBQ0FOLEVBQUFnQixTQUFBLFVBRUFoQixFQUFBaUIsWUFBQSxVQXZDQW5CLEVBQUFvQixjQUNBaEIsT0FBQWlCLFlBQUEsRUFDQW5CLEVBQUFnQixTQUFBLFdBR0FkLE9BQUFpQixZQUFBLEVBQ0FuQixFQUFBaUIsWUFBQSxVQXNDQWhCLElBK0dBLFdBRUEsSUFBQW1CLEVBQUFDLGVBQUFDLFFBQUEsc0JBRUEsS0FBQUYsRUFBQSxPQUNBLElBQ0FHLEVBQUE1QixFQUFBLGFBQUE2QixXQUFBQyxPQUFBLEVBQ0FDLEVB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RUFBQUcsWUFBQSxTQU1BRCxFQUFBVCxRQUFBLENBQ0FDLGdCQUFBLDJCQUdBOUYsRUFBQTZGLFFBQUEsQ0FDQUUsWUFBQSxpQ0FpQkFPLEVBQUFULFVBQUEzRyxHQUFBLGFBQUEsV0FFQWlILE1BQUEsdUJBRUFqSCxHQUFBLGNBQUEsU0FBQUMsR0FXQSxPQVRBMkMsUUFBQUMsSUFBQSwyQkFTQSxJQW1LQXVFLEdBRUF0RiIsImZpbGUiOiJzY3JpcHQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGNvZGVraXQtcHJlcGVuZCBcIi92ZW5kb3IvaGFtbWVyLTIuMC44LmpzXCI7XHJcblxyXG4kKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICB2YXIgJGRvY3VtZW50ID0gdGhpcztcclxuICB2YXIgYm9keSA9ICQoJ2JvZHknKTtcclxuXHJcbiAgaWYoJGRvY3VtZW50Lm9udG91Y2hzdGFydCl7XHJcbiAgICB3aW5kb3cudG91Y2hBdmFpbCA9IHRydWU7XHJcbiAgICBib2R5LmFkZENsYXNzKCd0b3VjaCcpO1xyXG5cclxuICB9ZWxzZXtcclxuICAgIHdpbmRvdy50b3VjaEF2YWlsID0gZmFsc2U7XHJcbiAgICBib2R5LnJlbW92ZUNsYXNzKCd0b3VjaCcpO1xyXG5cclxuICB9XHJcblxyXG5cclxuXHJcbi8qXHJcblxyXG5zZXRJbnRlcnZhbChmdW5jdGlvbigpe1xyXG4gIGFsZXJ0KFwiJChkb2N1bWVudCkuY2xpZW50SGVpZ2h0OiBcIiArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpO1xyXG4gIGFsZXJ0KFwiJChkb2N1bWVudCkuaW5uZXJIZWlnaHQ6IFwiICsgJChkb2N1bWVudCkuaW5uZXJIZWlnaHQoKSk7XHJcbn0sNTAwMCk7XHJcblxyXG4qL1xyXG5cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHZpZXdwb3J0RGltZW5zaW9ucygpe1xyXG5cclxuICAgIHdpbmRvdy52aCA9ICRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgd2luZG93LnZ3ID0gJGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgIHdpbmRvdy53aCA9ICQod2luZG93KS5oZWlnaHQoKTtcclxuICAgIHdpbmRvdy53dyA9ICQod2luZG93KS53aWR0aCgpO1xyXG4gICAgd2luZG93LmRoID0gJChkb2N1bWVudCkuaGVpZ2h0KCk7XHJcbiAgICB3aW5kb3cuZHcgPSAkKGRvY3VtZW50KS53aWR0aCgpO1xyXG4gICAgd2luZG93LnZtaW4gPSB2aCA+IHZ3ID8gdncgOiB2aDtcclxuICAgIHdpbmRvdy52bWF4ID0gdmggPCB2dyA/IHZ3IDogdmg7XHJcblxyXG5cclxuXHJcbiAgICBpZih2dzwgMTAyNCl7XHJcbiAgICAgIGJvZHkuYWRkQ2xhc3MoJ21vYmlsZScpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoJ21vYmlsZScpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIHZpZXdwb3J0RGltZW5zaW9ucygpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gIHVwZGF0ZVRvTGFzdFBvcygpOyAvLyB1cGRhdGUgdG8gdGhlIGxhc3Qga25vd24gc2VjdGlvblxyXG5cclxuICBcclxuICB2YXIgd29yayA9IGJvZHkuZmluZCgnLndvcmsnKTtcclxuICB2YXIgaGlyZSA9IGJvZHkuZmluZCgnLmhpcmUnKTtcclxuXHJcbiAgdmFyIGhpcmVXcmFwcGVyID0gaGlyZS5jaGlsZHJlbignLmhpcmVfX3dyYXBwZXInKTtcclxuXHJcblxyXG4gIHZhciBhYm91dCA9IGJvZHkuZmluZCgnLmFib3V0Jyk7XHJcbiAgdmFyIGNvbnRhY3QgPSBib2R5LmZpbmQoJy5jb250YWN0Jyk7XHJcbiAgdmFyIGZvcm1GaWVsZHMgPSBib2R5LmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpO1xyXG4gIHZhciBjb250YWN0UG9wdXAgPSAkKCcjY29udGFjdF9fcG9wdXAnKTtcclxuXHJcbiAgLy8gbmF2IG1lbnUgbGlua3MgY2xpY2sgaGFuZGxlclxyXG4gICQoJy5zaWRlLW5hdiBsaSwgLm91dGVyLW5hdiBsaScpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgaWYgKCEoJCh0aGlzKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpKSB7XHJcblxyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgY3VyQWN0aXZlID0gJHRoaXMucGFyZW50KCkuZmluZCgnLmlzLWFjdGl2ZScpLFxyXG4gICAgICAgICAgY3VyUG9zID0gJHRoaXMucGFyZW50KCkuY2hpbGRyZW4oKS5pbmRleChjdXJBY3RpdmUpLFxyXG4gICAgICAgICAgbmV4dFBvcyA9ICR0aGlzLnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXgoJHRoaXMpLFxyXG4gICAgICAgICAgbGFzdEl0ZW0gPSAkKHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCkubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgIHVwZGF0ZU5hdnMobmV4dFBvcyk7XHJcbiAgICAgIHVwZGF0ZUNvbnRlbnQoY3VyUG9zLCBuZXh0UG9zLCBsYXN0SXRlbSk7XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBjdGEgYnV0dG9uc1xyXG4gICQoJy5jdGEnKS5jbGljayhmdW5jdGlvbigpe1xyXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuXHJcbiAgICBpZiAoJHRoaXMuaGFzQ2xhc3MoJ2N0YS0tY29udGFjdCcpKSB7XHJcbiAgICBcclxuICAgICAgY29udGFjdFBvcHVwLnJlbW92ZUNsYXNzKCdvZmYnKTtcclxuXHJcbiAgICB9ZWxzZSBpZigkdGhpcy5oYXNDbGFzcygnY3RhLS1hYm91dCcpKXtcclxuICAgICAgY2hhbmdlU2xpZGVUbygyKTsgLy8gYWJvdXQgc2VjdGlvbiBpcyBvbiBpbmRleCAtIDJcclxuICAgIH1lbHNlIGlmKCR0aGlzLmhhc0NsYXNzKCdjdGEtLWhpcmUnKSl7XHJcbiAgICAgIGNoYW5nZVNsaWRlVG8oNCk7IC8vIGhpcmUgdXMgc2VjdGlvbiBpcyBvbiBpbmRleCAtIDRcclxuICAgIH1cclxuXHJcbiAgfSk7XHJcblxyXG5cclxuICAvKiBTVEFSVCAtIGZ1bmN0aW9ucyBmb3IgbmF2aWdhdGluZyB0aHJvdWdoIHNsaWRlcyAqL1xyXG5cclxuICAvLyBET01Nb3VzZVNjcm9sbCBpbmNsdWRlZCBmb3IgZmlyZWZveCBzdXBwb3J0XHJcbiAgdmFyIGNhblNjcm9sbCA9IHRydWUsXHJcbiAgICAgIHNjcm9sbENvbnRyb2xsZXIgPSBudWxsO1xyXG5cclxuICAkKHRoaXMpLm9uKCdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJywgZnVuY3Rpb24oZSl7XHJcblxyXG4gICAgaWYgKCEoJCgnLm91dGVyLW5hdicpLmhhc0NsYXNzKCdpcy12aXMnKSkpIHtcclxuXHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgIHZhciBkZWx0YSA9IChlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YSkgPyAtZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGEgOiBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsICogMjA7XHJcblxyXG4gICAgICBpZiAoZGVsdGEgPiA1MCAmJiBjYW5TY3JvbGwpIHtcclxuICAgICAgICBjYW5TY3JvbGwgPSBmYWxzZTtcclxuICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsQ29udHJvbGxlcik7XHJcbiAgICAgICAgc2Nyb2xsQ29udHJvbGxlciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGNhblNjcm9sbCA9IHRydWU7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgdXBkYXRlSGVscGVyKDEpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKGRlbHRhIDwgLTUwICYmIGNhblNjcm9sbCkge1xyXG4gICAgICAgIGNhblNjcm9sbCA9IGZhbHNlO1xyXG4gICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxDb250cm9sbGVyKTtcclxuICAgICAgICBzY3JvbGxDb250cm9sbGVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgY2FuU2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICB1cGRhdGVIZWxwZXIoLTEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gIFxyXG4gIH0pO1xyXG4gIFxyXG5cclxuXHJcbiAgLy8gc3dpcGUgc3VwcG9ydCBmb3IgdG91Y2ggZGV2aWNlc1xyXG4gIHZhciB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXdwb3J0JyksXHJcbiAgICAgIG1jID0gbmV3IEhhbW1lcih0YXJnZXRFbGVtZW50KTtcclxuICBtYy5nZXQoJ3N3aXBlJykuc2V0KHsgZGlyZWN0aW9uOiBIYW1tZXIuRElSRUNUSU9OX1ZFUlRJQ0FMIH0pO1xyXG4gIG1jLm9uKCdzd2lwZXVwIHN3aXBlZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICB1cGRhdGVIZWxwZXIoZSk7XHJcblxyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5rZXl1cChmdW5jdGlvbihlKXtcclxuXHJcbiAgICBpZiAoISgkKCcub3V0ZXItbmF2JykuaGFzQ2xhc3MoJ2lzLXZpcycpKSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHVwZGF0ZUhlbHBlcihlKTtcclxuICAgIH1cclxuXHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZVRvTGFzdFBvcygpe1xyXG4gICAgXHJcbiAgICB2YXIgbGFzdEtub3duUG9zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnYWN0aXZlU2VjdGlvbkNsYXNzJyk7XHJcbiAgICBcclxuICAgIGlmICghKCtsYXN0S25vd25Qb3MpKSByZXR1cm47XHJcbiAgICB2YXIgY3VyUG9zID0gMCxcclxuICAgICAgICBsYXN0SXRlbSA9ICQoJy5zaWRlLW5hdicpLmNoaWxkcmVuKCkubGVuZ3RoIC0gMSxcclxuICAgICAgICBuZXh0UG9zID0gbGFzdEtub3duUG9zO1xyXG5cclxuICAgICAgLyppZiAoY3VyUG9zID09IDApe1xyXG4gICAgICAgIG5leHRQb3MgPSBjdXJQb3MgLSAxOyovXHJcbiAgICAgICAgdXBkYXRlTmF2cyhuZXh0UG9zKTtcclxuICAgICAgICB1cGRhdGVDb250ZW50KGN1clBvcywgbmV4dFBvcywgbGFzdEl0ZW0pO1xyXG4gICAgICAvKn1cclxuICAgICAgZWxzZSBpZiAoY3VyUG9zICE9PSBsYXN0SXRlbSkge1xyXG4gICAgICAgIG5leHRQb3MgPSBjdXJQb3MgKyAxO1xyXG4gICAgICAgIHVwZGF0ZU5hdnMobmV4dFBvcyk7XHJcbiAgICAgICAgdXBkYXRlQ29udGVudChjdXJQb3MsIG5leHRQb3MsIGxhc3RJdGVtKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB1cGRhdGVOYXZzKG5leHRQb3MpO1xyXG4gICAgICAgIHVwZGF0ZUNvbnRlbnQoY3VyUG9zLCBuZXh0UG9zLCBsYXN0SXRlbSk7XHJcbiAgICAgIH0qL1xyXG4gICAgICAgXHJcbiAgfVxyXG5cclxuICAvLyBkZXRlcm1pbmUgc2Nyb2xsLCBzd2lwZSwgYW5kIGFycm93IGtleSBkaXJlY3Rpb25cclxuICBmdW5jdGlvbiB1cGRhdGVIZWxwZXIocGFyYW0pIHtcclxuXHJcbiAgICB2YXIgY3VyQWN0aXZlID0gJCgnLnNpZGUtbmF2JykuZmluZCgnLmlzLWFjdGl2ZScpLFxyXG4gICAgICAgIGN1clBvcyA9ICQoJy5zaWRlLW5hdicpLmNoaWxkcmVuKCkuaW5kZXgoY3VyQWN0aXZlKSxcclxuICAgICAgICBsYXN0SXRlbSA9ICQoJy5zaWRlLW5hdicpLmNoaWxkcmVuKCkubGVuZ3RoIC0gMSxcclxuICAgICAgICBuZXh0UG9zID0gMDtcclxuXHJcbiAgICBpZiAocGFyYW0udHlwZSA9PT0gXCJzd2lwZXVwXCIgfHwgcGFyYW0ua2V5Q29kZSA9PT0gNDAgfHwgcGFyYW0gPiAwKSB7XHJcbiAgICAgIGlmIChjdXJQb3MgIT09IGxhc3RJdGVtKSB7XHJcbiAgICAgICAgbmV4dFBvcyA9IGN1clBvcyArIDE7XHJcbiAgICAgICAgdXBkYXRlTmF2cyhuZXh0UG9zKTtcclxuICAgICAgICB1cGRhdGVDb250ZW50KGN1clBvcywgbmV4dFBvcywgbGFzdEl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHVwZGF0ZU5hdnMobmV4dFBvcyk7XHJcbiAgICAgICAgdXBkYXRlQ29udGVudChjdXJQb3MsIG5leHRQb3MsIGxhc3RJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocGFyYW0udHlwZSA9PT0gXCJzd2lwZWRvd25cIiB8fCBwYXJhbS5rZXlDb2RlID09PSAzOCB8fCBwYXJhbSA8IDApe1xyXG4gICAgICBpZiAoY3VyUG9zICE9PSAwKXtcclxuICAgICAgICBuZXh0UG9zID0gY3VyUG9zIC0gMTtcclxuICAgICAgICB1cGRhdGVOYXZzKG5leHRQb3MpO1xyXG4gICAgICAgIHVwZGF0ZUNvbnRlbnQoY3VyUG9zLCBuZXh0UG9zLCBsYXN0SXRlbSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbmV4dFBvcyA9IGxhc3RJdGVtO1xyXG4gICAgICAgIHVwZGF0ZU5hdnMobmV4dFBvcyk7XHJcbiAgICAgICAgdXBkYXRlQ29udGVudChjdXJQb3MsIG5leHRQb3MsIGxhc3RJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG5cclxuXHJcbiAgLy8gc3luYyBzaWRlIGFuZCBvdXRlciBuYXZpZ2F0aW9uc1xyXG4gIGZ1bmN0aW9uIHVwZGF0ZU5hdnMobmV4dFBvcykgeyAgICAgIFxyXG5cclxuICAgICQoJy5zaWRlLW5hdiwgLm91dGVyLW5hdicpLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgJCgnLnNpZGUtbmF2JykuY2hpbGRyZW4oKS5lcShuZXh0UG9zKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICAkKCcub3V0ZXItbmF2JykuY2hpbGRyZW4oKS5lcShuZXh0UG9zKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIC8vIHVwZGF0ZSBtYWluIGNvbnRlbnQgYXJlYVxyXG4gIGZ1bmN0aW9uIHVwZGF0ZUNvbnRlbnQoY3VyUG9zLCBuZXh0UG9zLCBsYXN0SXRlbSkge1xyXG5cclxuICAgIC8vIHNhdmUgdGhlIG5leHQgYWN0aXZlIHNlY3Rpb24gZm9yIHRoZSBzZXNzaW9uIHRvIHJlc3RvcmUgb24gcmVsb2FkXHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdhY3RpdmVTZWN0aW9uQ2xhc3MnLG5leHRQb3MpOyBcclxuXHJcbiAgICAkKCcubWFpbi1jb250ZW50JykuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcygnc2VjdGlvbi0taXMtYWN0aXZlJyk7XHJcbiAgICAkKCcubWFpbi1jb250ZW50JykuY2hpbGRyZW4oKS5lcShuZXh0UG9zKS5hZGRDbGFzcygnc2VjdGlvbi0taXMtYWN0aXZlJyk7XHJcbiAgICAkKCcubWFpbi1jb250ZW50IC5zZWN0aW9uJykuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcygnc2VjdGlvbi0tbmV4dCBzZWN0aW9uLS1wcmV2Jyk7XHJcblxyXG4gICAgaWYgKGN1clBvcyA9PT0gbGFzdEl0ZW0gJiYgbmV4dFBvcyA9PT0gMCB8fCBjdXJQb3MgPT09IDAgJiYgbmV4dFBvcyA9PT0gbGFzdEl0ZW0pIHtcclxuICAgICAgJCgnLm1haW4tY29udGVudCAuc2VjdGlvbicpLmNoaWxkcmVuKCkucmVtb3ZlQ2xhc3MoJ3NlY3Rpb24tLW5leHQgc2VjdGlvbi0tcHJldicpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY3VyUG9zIDwgbmV4dFBvcykge1xyXG4gICAgICAkKCcubWFpbi1jb250ZW50JykuY2hpbGRyZW4oKS5lcShjdXJQb3MpLmNoaWxkcmVuKCkuYWRkQ2xhc3MoJ3NlY3Rpb24tLW5leHQnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkKCcubWFpbi1jb250ZW50JykuY2hpbGRyZW4oKS5lcShjdXJQb3MpLmNoaWxkcmVuKCkuYWRkQ2xhc3MoJ3NlY3Rpb24tLXByZXYnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV4dFBvcyAhPT0gMCAmJiBuZXh0UG9zICE9PSBsYXN0SXRlbSkge1xyXG4gICAgICAkKCcuaGVhZGVyLS1jdGEnKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJCgnLmhlYWRlci0tY3RhJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBvdXRlck5hdigpIHtcclxuXHJcbiAgICAvKiBPcGVucyB0aGUgbmF2aWdhdGlvbiBtZW51ICovXHJcbiAgICAkKCcuaGVhZGVyLS1uYXYtdG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICQoJy5wZXJzcGVjdGl2ZScpLmFkZENsYXNzKCdwZXJzcGVjdGl2ZS0tbW9kYWx2aWV3Jyk7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAkKCcucGVyc3BlY3RpdmUnKS5hZGRDbGFzcygnZWZmZWN0LXJvdGF0ZS1sZWZ0LS1hbmltYXRlJyk7XHJcbiAgICAgIH0sIDI1KTtcclxuICAgICAgJCgnLm91dGVyLW5hdiwgLm91dGVyLW5hdiBsaSwgLm91dGVyLW5hdi0tcmV0dXJuJykuYWRkQ2xhc3MoJ2lzLXZpcycpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8qIENsb3NlcyB0aGUgbmF2aWdhdGlvbiBtZW51IG9uIGNsaWNrIG9mIGFuIGl0ZW0qLyAgICBcclxuICAgICQoJy5vdXRlci1uYXYtLXJldHVybiwgLm91dGVyLW5hdiBsaScpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAkKCcucGVyc3BlY3RpdmUnKS5yZW1vdmVDbGFzcygnZWZmZWN0LXJvdGF0ZS1sZWZ0LS1hbmltYXRlJyk7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAkKCcucGVyc3BlY3RpdmUnKS5yZW1vdmVDbGFzcygncGVyc3BlY3RpdmUtLW1vZGFsdmlldycpO1xyXG4gICAgICB9LCA0MDApO1xyXG4gICAgICAkKCcub3V0ZXItbmF2LCAub3V0ZXItbmF2IGxpLCAub3V0ZXItbmF2LS1yZXR1cm4nKS5yZW1vdmVDbGFzcygnaXMtdmlzJyk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hhbmdlU2xpZGVUbyh1cGRhdGVUbyl7XHJcblxyXG4gICAgICB2YXIgY3VyQWN0aXZlID0gJCgnLnNpZGUtbmF2JykuZmluZCgnLmlzLWFjdGl2ZScpLFxyXG4gICAgICAgICAgY3VyUG9zID0gJCgnLnNpZGUtbmF2JykuY2hpbGRyZW4oKS5pbmRleChjdXJBY3RpdmUpLFxyXG4gICAgICAgICAgbGFzdEl0ZW0gPSAkKCcuc2lkZS1uYXYnKS5jaGlsZHJlbigpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICBuZXh0UG9zID0gdXBkYXRlVG87XHJcblxyXG4gICAgICAvKmNvbnNvbGUubG9nKCdjdXJBY3RpdmU6ICcgKyBjdXJBY3RpdmUpO1xyXG4gICAgICBjb25zb2xlLmxvZygnY3VyUG9zOiAnK2N1clBvcyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdsYXN0SXRlbTogJytsYXN0SXRlbSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCduZXh0UG9zOiAnK25leHRQb3MpOyovXHJcbiAgICAgIHVwZGF0ZU5hdnModXBkYXRlVG8pO1xyXG4gICAgICB1cGRhdGVDb250ZW50KGN1clBvcywgbmV4dFBvcywgbGFzdEl0ZW0pO1xyXG5cclxuICB9XHJcblxyXG5cclxuICAvKiBFTkQgLSAgZnVuY3Rpb25zIGZvciBuYXZpZ2F0aW5nIHRocm91Z2ggc2xpZGVzICovXHJcblxyXG5cclxuICBmdW5jdGlvbiBhYm91dFNsaWRlcigpIHtcclxuXHJcbiAgICB2YXIgYWJvdXRTbGlkZXIgPSBhYm91dC5maW5kKCcuc2xpZGVyJyk7XHJcbiAgICB2YXIgb3B0aW9ucyA9IGFib3V0LmZpbmQoJy5hYm91dC0tb3B0aW9ucyBhJyk7XHJcblxyXG4gICAgdmFyIHNsaWRpbmdTcGVlZCA9IDE1MDA7XHJcblxyXG4gICAgLypcclxuICAgIHZhciBvdXRlclNsaWRlclByZXZCdG4gPSBvdXRlclNsaWRlci5zaWJsaW5ncygnLnNsaWRlci0tcHJldicpO1xyXG4gICAgdmFyIG91dGVyU2xpZGVyTmV4dEJ0biA9IG91dGVyU2xpZGVyLnNpYmxpbmdzKCcuc2xpZGVyLS1uZXh0Jyk7XHJcbiAgICAqL1xyXG5cclxuICAgIC8qIHZhciBpbm5lclNsaWRlciA9IHdvcmsuZmluZCgnLmlubmVyLXNsaWRlcicpO1xyXG5cclxuICAgIHZhciBpbm5lclNsaWRlclByZXZCdG4gPSB3b3JrLmZpbmQoJy5pbm5lci1zbGlkZXJfX25hdi0tcHJldicpO1xyXG4gICAgdmFyIGlubmVyU2xpZGVyTmV4dEJ0biA9IHdvcmsuZmluZCgnLmlubmVyLXNsaWRlcl9fbmF2LS1uZXh0Jyk7XHJcblxyXG4gICAgdmFyIG91dGVyU2xpZGVyQ29udHJvbHMgPSB3b3JrLmZpbmQoJy5vdXRlci1zbGlkZXJfX2NvbnRyb2xzJyk7XHJcblxyXG4gICAgdmFyIG91dGVyU2xpZGVyUHJldkJ0biA9IHdvcmsuZmluZCgnLm91dGVyLXNsaWRlcl9fbmF2LS1wcmV2Jyk7XHJcbiAgICB2YXIgb3V0ZXJTbGlkZXJOZXh0QnRuID0gd29yay5maW5kKCcub3V0ZXItc2xpZGVyX19uYXYtLW5leHQnKTtcclxuXHJcbiAgICAqL1xyXG5cclxuICAgIC8vIGluaXQgc3dpcGVyIHNsaWRlciBmb3Igb3V0ZXIgc2xpZGVzXHJcbiAgICB2YXIgc3dpcGVyID0gbmV3IFN3aXBlciAoYWJvdXRTbGlkZXIsIHtcclxuICAgICAgaW5pdDogdHJ1ZSxcclxuICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgbG9vcGVkU2xpZGVzOiA0LFxyXG4gICAgICBzcGVlZDogc2xpZGluZ1NwZWVkLFxyXG4gICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXHJcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxyXG4gICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgZWZmZWN0OiAnZmFkZScsXHJcbiAgICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXHJcbiAgICAgIGZhZGVFZmZlY3Q6IHtcclxuICAgICAgICBjcm9zc0ZhZGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjp7XHJcbiAgICAgICAgYnk6ICdzbGlkZSdcclxuICAgICAgfVxyXG4gICAgICAvKixcclxuICAgICAgaGFzaE5hdmlnYXRpb246IHRydWUsXHJcbiAgICAgIGhhc2hOYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgd2F0Y2hTdGF0ZTogdHJ1ZVxyXG4gICAgICB9Ki9cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBvcHRpb25zLm9uKCdjbGljaycsZnVuY3Rpb24oKXtcclxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgdmFyIHNsaWRlID0gJHRoaXMuZGF0YSgnc2xpZGUnKTtcclxuXHJcbiAgICAgIHN3aXBlci5zbGlkZVRvKE51bWJlcihzbGlkZSksIHNsaWRpbmdTcGVlZCk7XHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICB9IC8vIEVORCBvZiBhYm91dFNsaWRlciBGdW5jXHJcblxyXG5cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHdvcmtTbGlkZXIoKSB7XHJcbiAgICB2YXIgYWN0aXZlSW5uZXJTbGlkZXI7XHJcblxyXG4gICAgdmFyIG91dGVyU2xpZGVyID0gd29yay5maW5kKCcub3V0ZXItc2xpZGVyJyk7XHJcbiAgICAgIC8qdmFyIG91dGVyU2xpZGVyUHJldkJ0biA9IG91dGVyU2xpZGVyLnNpYmxpbmdzKCcuc2xpZGVyLS1wcmV2Jyk7XHJcbiAgICAgIHZhciBvdXRlclNsaWRlck5leHRCdG4gPSBvdXRlclNsaWRlci5zaWJsaW5ncygnLnNsaWRlci0tbmV4dCcpO1xyXG4gICAgICAqL1xyXG4gICAgdmFyIGlubmVyU2xpZGVyID0gd29yay5maW5kKCcuaW5uZXItc2xpZGVyJyk7XHJcblxyXG4gICAgdmFyIGlubmVyU2xpZGVyUHJldkJ0biA9IHdvcmsuZmluZCgnLmlubmVyLXNsaWRlcl9fbmF2LS1wcmV2Jyk7XHJcbiAgICB2YXIgaW5uZXJTbGlkZXJOZXh0QnRuID0gd29yay5maW5kKCcuaW5uZXItc2xpZGVyX19uYXYtLW5leHQnKTtcclxuXHJcbiAgICB2YXIgb3V0ZXJTbGlkZXJDb250cm9scyA9IHdvcmsuZmluZCgnLm91dGVyLXNsaWRlcl9fY29udHJvbHMnKTtcclxuXHJcbiAgICB2YXIgb3V0ZXJTbGlkZXJQcmV2QnRuID0gd29yay5maW5kKCcub3V0ZXItc2xpZGVyX19uYXYtLXByZXYnKTtcclxuICAgIHZhciBvdXRlclNsaWRlck5leHRCdG4gPSB3b3JrLmZpbmQoJy5vdXRlci1zbGlkZXJfX25hdi0tbmV4dCcpO1xyXG5cclxuICAgIFxyXG5cclxuICAgIC8vIGluaXQgc3dpcGVyIHNsaWRlciBmb3Igb3V0ZXIgc2xpZGVzXHJcbiAgICB2YXIgb3V0ZXJTd2lwZXIgPSBuZXcgU3dpcGVyIChvdXRlclNsaWRlciwge1xyXG4gICAgICBpbml0OiBmYWxzZSxcclxuICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgbG9vcGVkU2xpZGVzOiA0LFxyXG4gICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXHJcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxyXG4gICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBmYWxzZSxcclxuICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxyXG4gICAgICAvKmZhZGVFZmZlY3Q6IHtcclxuICAgICAgICBjcm9zc0ZhZGU6IHRydWVcclxuICAgICAgfSwqL1xyXG4gICAgICBjb250cm9sbGVyOntcclxuICAgICAgICBieTogJ3NsaWRlJ1xyXG4gICAgICB9XHJcbiAgICAgIC8qLFxyXG4gICAgICBoYXNoTmF2aWdhdGlvbjogdHJ1ZSxcclxuICAgICAgaGFzaE5hdmlnYXRpb246IHtcclxuICAgICAgICB3YXRjaFN0YXRlOiB0cnVlXHJcbiAgICAgIH0qL1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8vIGRldGVybWluaW5nIGN1cnJlbnQgaW5uZXIgc3dpcGVyIGluZGV4XHJcbiAgICB2YXIgY3VycmVudElubmVyU3dpcGVySW5kZXg7XHJcbiAgICBvdXRlclN3aXBlci5vbignaW5pdCcsZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnc3dpcGVyIGluaXRpYWxpemVkJyk7XHJcbiAgICAgIGN1cnJlbnRJbm5lclN3aXBlckluZGV4ID0gb3V0ZXJTd2lwZXIuYWN0aXZlSW5kZXg7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50SW5uZXJTd2lwZXJJbmRleDogJysgY3VycmVudElubmVyU3dpcGVySW5kZXgpO1xyXG4gICAgfSksXHJcblxyXG4gICAgb3V0ZXJTd2lwZXIuaW5pdCgpOyAvLyBpbml0IG91dGVyU3dpcGVyXHJcblxyXG4gICAgdmFyIG91dGVyU3dpcGVyQ29udHJvbHMgPSBuZXcgU3dpcGVyKG91dGVyU2xpZGVyQ29udHJvbHMsIHtcclxuICAgICAgZWZmZWN0OiAnc2xpZGUnLFxyXG4gICAgICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxyXG4gICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgY2VudGVyZWRTbGlkZXM6IHRydWUsXHJcbiAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgIGxvb3BlZFNsaWRlczogNCxcclxuICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDM1LFxyXG4gICAgICB0b3VjaFJhdGlvOiAwLjIsXHJcbiAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IHRydWUsXHJcbiAgICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXHJcbiAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICBuZXh0RWw6IG91dGVyU2xpZGVyTmV4dEJ0bixcclxuICAgICAgICBwcmV2RWw6IG91dGVyU2xpZGVyUHJldkJ0blxyXG4gICAgICB9LFxyXG4gICAgICBjb250cm9sbGVyOntcclxuICAgICAgICBieTogJ3NsaWRlJ1xyXG4gICAgICB9LFxyXG4gICAgICBicmVha3BvaW50czp7XHJcbiAgICAgICAgNzAwOntcclxuICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgICAgIHNwYWNlQmV0d2VlbjogMFxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIG91dGVyU3dpcGVyQ29udHJvbHMuY29udHJvbGxlci5jb250cm9sID0gb3V0ZXJTd2lwZXI7XHJcbiAgICBvdXRlclN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBvdXRlclN3aXBlckNvbnRyb2xzO1xyXG5cclxuXHJcbiAgICAvLyBpbml0IHN3aXBlciBzbGlkZXIgZm9yIG91dGVyIHNsaWRlc1xyXG4gICAgdmFyIGlubmVyU3dpcGVyID0gbmV3IFN3aXBlciAoaW5uZXJTbGlkZXIsIHtcclxuICAgICAgXHJcbiAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICBsb29wOiB0cnVlLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgIC8vIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgbG9vcGVkU2xpZGVzOiA3LFxyXG4gICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMTAsXHJcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDAsXHJcblxyXG4gICAgICBlZmZlY3Q6ICdjb3ZlcmZsb3cnLFxyXG4gICAgICAvLyBncmFiQ3Vyc29yOiB0cnVlLFxyXG4gICAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcclxuICAgICAgICByb3RhdGU6IDQwLFxyXG4gICAgICAgIHN0cmV0Y2g6IDAsXHJcbiAgICAgICAgZGVwdGg6IDEwMCxcclxuICAgICAgICBtb2RpZmllcjogMSxcclxuICAgICAgICBzbGlkZVNoYWRvd3MgOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXHJcbiAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IHRydWVcclxuXHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAvLyBzd2lwaW5nIGN1cnJlbnQgaW5uZXJTd2lwZXIgb24gY2xpY2tzXHJcbiAgICBcclxuICAgIHZhciBzcGVlZCA9IDQwMDtcclxuICAgIHZhciB0b3VjaDtcclxuICAgIGlubmVyU2xpZGVyTmV4dEJ0bi5hZGQoaW5uZXJTbGlkZXJQcmV2QnRuKS5vbignY2xpY2sgdG91Y2hzdGFydCcsZnVuY3Rpb24oZSl7XHJcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZS50eXBlPT0ndG91Y2hzdGFydCcpIHtcclxuICAgICAgICB0b3VjaCA9IHRydWU7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgIHRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgfSw0MDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyByZXR1cm4gaWYgY2xpY2sgZmlyZWQgd2l0aGluIDQwMCBtcyBhZnRlciB0b3VjaFxyXG4gICAgICBpZiAodG91Y2ggJiYgZS50eXBlPT0nY2xpY2snKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY3VySW5uZXJTd2lwZXJDb250ID0gb3V0ZXJTd2lwZXIuc2xpZGVzW2N1cnJlbnRJbm5lclN3aXBlckluZGV4XTtcclxuICAgICAgdmFyIGN1cklubmVyU3dpcGVyID0gJChjdXJJbm5lclN3aXBlckNvbnQpLmZpbmQoJy5pbm5lci1zbGlkZXInKVswXTtcclxuICAgICAgdmFyIGN1clN3aXBlckluc3RhbmNlID0gY3VySW5uZXJTd2lwZXIuc3dpcGVyO1xyXG5cclxuICAgICAgaWYgKCR0aGlzLmhhc0NsYXNzKCdpbm5lci1zbGlkZXJfX3ByZXYnKSkge1xyXG4gICAgICAgICAgY3VySW5uZXJTd2lwZXIuc3dpcGVyLnNsaWRlUHJldig0MDApO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICAgIGN1cklubmVyU3dpcGVyLnN3aXBlci5zbGlkZU5leHQoNDAwKTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pXHJcblxyXG4gICAgXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8vIGRldGVjdGluZyBvdXRlclN3aXBlciB0cmFuc2l0aW9uRW5kIHRvIGNoYW5nZSBjdXJyZW50SW5uZXJTd2lwZXJJbmRleFxyXG5cclxuICAgIHZhciBvdXRlclN3aXBlclRyaWdnZXIgLCBpbW1GaXJlVGltZW91dCA9IDIwMDtcclxuICAgIG91dGVyU3dpcGVyLm9uKCd0cmFuc2l0aW9uRW5kJyxmdW5jdGlvbigpe1xyXG4gICAgICAvLyBzdG9wcGluZyBpdCB0byBleGVjdXRlIG11bHRpcGxlIHRpbWVzIGNvbnNlY3V0aXZlbHlcclxuICAgICAgaWYgKG91dGVyU3dpcGVyVHJpZ2dlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgb3V0ZXJTd2lwZXJUcmlnZ2VyID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ2NoYW5nZWQnKTtcclxuXHJcbiAgICAgIGN1cnJlbnRJbm5lclN3aXBlckluZGV4ID0gb3V0ZXJTd2lwZXIuYWN0aXZlSW5kZXg7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50SW5uZXJTd2lwZXJJbmRleDogJysgY3VycmVudElubmVyU3dpcGVySW5kZXgpO1xyXG5cclxuXHJcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgb3V0ZXJTd2lwZXJUcmlnZ2VyID0gdW5kZWZpbmVkO1xyXG4gICAgICB9LGltbUZpcmVUaW1lb3V0KTsgLy8gYWxsb3dpbmcgdGhlIGNhbGxiYWNrIHRvIHJ1biBhZnRlciBhIGNlcnRhaW4gdGltZVxyXG5cclxuICAgIH0pO1xyXG5cclxuICB9IC8vIEVORCBvZiB3b3JrU2xpZGVyIEZ1bmNcclxuXHJcbiAgXHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25MYWJlbHMoKSB7XHJcblxyXG4gICAgZm9ybUZpZWxkcy5mb2N1c291dChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgdmFyIHRleHRWYWwgPSAkKHRoaXMpLnZhbCgpO1xyXG5cclxuICAgICAgaWYgKHRleHRWYWwgPT09IFwiXCIpIHtcclxuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdoYXMtdmFsdWUnKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdoYXMtdmFsdWUnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY29ycmVjdCBtb2JpbGUgZGV2aWNlIHdpbmRvdyBwb3NpdGlvblxyXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0UHJvamVjdEZvcm0oKXtcclxuICAgICAgdmFyIHN0YXJ0UHJvamVjdEZvcm0gPSAkKCcjc3RhcnRQcm9qZWN0Rm9ybScpO1xyXG5cclxuICAgICAgdmFyIG5hbWVGaWVsZCA9ICQoJyNuYW1lU1AnKTtcclxuICAgICAgdmFyIGVtYWlsRmllbGQgPSAkKCcjZW1haWxTUCcpO1xyXG4gICAgICB2YXIgd2ViU2VydmljZUZpZWxkID0gJCgnI3NlcnZpY2Utd2ViJyk7XHJcbiAgICAgIHZhciBzZXJ2aWNlc0NvbnQgPSB3ZWJTZXJ2aWNlRmllbGQuY2xvc2VzdCgnLndvcmstcmVxdWVzdC0tc2VydmljZXMnKTtcclxuXHJcblxyXG4gICAgICAvLyBjaGFuZ2UgdmFsaWRhdGlvbiBtZXNzYWdlcyBhbmQgY3VzdG9taXplIG9wdGlvbnNcclxuXHJcbiAgICAgIHN0YXJ0UHJvamVjdEZvcm0ucGFyc2xleSh7XHJcbiAgICAgICAgcmVxdWlyZWRNZXNzYWdlOiAnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCdcclxuICAgICAgICBcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBlbWFpbEZpZWxkLnBhcnNsZXkoe1xyXG4gICAgICAgIHR5cGVNZXNzYWdlOiBcIkVudGVyIGEgdmFsaWQgZS1tYWlsIGFkZHJlc3NcIlxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHdlYlNlcnZpY2VGaWVsZC5wYXJzbGV5KHtcclxuICAgICAgICByZXF1aXJlZE1lc3NhZ2U6IFwiUGxlYXNlIHNlbGVjdCB0aGUgZGlnaXRhbCBzZXJ2aWNlL3MgeW91IHdhbnQgdXMgdG8gd29yayBvblwiLCAvLyBvbmx5IHdvcmtzIHdoZW4gdXNpbmcgdGhlIGZpcnN0IGNoZWNrYm94IGluIHRoZSBncm91cFxyXG4gICAgICAgIGVycm9yc0NvbnRhaW5lcjogZnVuY3Rpb24gKEZpZWxkKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBzZXJ2aWNlc0NvbnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGFzc0hhbmRsZXI6IGZ1bmN0aW9uIChGaWVsZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHNlcnZpY2VzQ29udDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgIC8vIGFjdCB0byB2YWxpZGF0aW9uIGVycm9ycyBhbmQgc3VjY2VzcyBcclxuXHJcbiAgICAgIHN0YXJ0UHJvamVjdEZvcm0ucGFyc2xleSgpLm9uKCdmb3JtOmVycm9yJyxmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgIGFsZXJ0KCd2YWxpZGF0aW9uIGVycm9ycycpOyAgXHJcblxyXG4gICAgICB9KS5vbignZm9ybTpzdWJtaXQnLGZ1bmN0aW9uKGUpe1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdIaXJlIEZvcm0gU3VibWl0dGVkJyk7XHJcblxyXG4gICAgICAgICAgLy8gd3JpdGUgY29kZSBiZWxvdyAgdG8gc3VibWl0IHRvIERCIGZvciBoaXJlIGZvcm1cclxuXHJcbiAgICAgICAgICAvLyB0aXA6IGhpcmUgc2VjdGlvbiBpcyBjYWNoZWQgaW4gdmFyaWFibGUgXHJcbiAgICAgICAgICAvLyBhYm92ZSBsaWtlIHRoaXMgYCB2YXIgaGlyZSA9IGJvZHkuZmluZCgnLmhpcmUnKTsgYCBcclxuICAgICAgICAgIC8vIHNvIGZpbmQgdGhlIGZvcm0gZmllbGRzICBsaWtlIHZhciBmb3JtRmllbGQgPSBoaXJlLmZpbmQoJ3NvbWV0aGluZycpO1xyXG5cclxuICAgICAgICAgIFxyXG5cclxuICAgICAgICAgIHJldHVybiBmYWxzZTsgIFxyXG5cclxuICAgICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29udGFjdEZvcm0oKXtcclxuICAgIC8vIGFsZXJ0KCk7XHJcbiAgICB2YXIgcG9wdXAgPSBjb250YWN0UG9wdXA7XHJcbiAgICB2YXIgY2xvc2UgPSBwb3B1cC5maW5kKCcjY2xvc2UtY29udGFjdC1mb3JtJyk7XHJcbiAgICB2YXIgY29udGFjdEZvcm0gID0gcG9wdXAuZmluZCgnZm9ybScpO1xyXG4gICAgdmFyIGVtYWlsRmllbGQgPSAgcG9wdXAuZmluZCgnI2VtYWlsQ0YnKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhwb3B1cCk7XHJcblxyXG4gICAgLy8gZGlzYWJsaW5nIHN3aXBpbmcgc2xpZGUgd2hlbiBwb3B1cCBpcyBvcGVuXHJcblxyXG4gICAgcG9wdXAub24oJ21vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwnLGZ1bmN0aW9uKGUpe1xyXG4gICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vICBzd2lwZSBzdXBwb3J0IGZvciB0b3VjaCBkZXZpY2VzXHJcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3cG9ydCcpLFxyXG4gICAgICAgIG1jID0gbmV3IEhhbW1lcih0YXJnZXRFbGVtZW50KTtcclxuICAgIG1jLmdldCgnc3dpcGUnKS5zZXQoeyBkaXJlY3Rpb246IEhhbW1lci5ESVJFQ1RJT05fVkVSVElDQUwgfSk7XHJcbiAgICBtYy5vbignc3dpcGV1cCBzd2lwZWRvd24nLCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhlKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICBjbG9zZS5vbignY2xpY2snLGZ1bmN0aW9uKCl7XHJcbiAgICAgIHBvcHVwLnRvZ2dsZUNsYXNzKCdvZmYnKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyBjaGFuZ2UgdmFsaWRhdGlvbiBtZXNzYWdlcyBhbmQgY3VzdG9taXplIG9wdGlvbnNcclxuXHJcbiAgICAgIGNvbnRhY3RGb3JtLnBhcnNsZXkoe1xyXG4gICAgICAgIHJlcXVpcmVkTWVzc2FnZTogJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZW1haWxGaWVsZC5wYXJzbGV5KHtcclxuICAgICAgICB0eXBlTWVzc2FnZTogXCJFbnRlciBhIHZhbGlkIGUtbWFpbCBhZGRyZXNzXCJcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKndlYlNlcnZpY2VGaWVsZC5wYXJzbGV5KHtcclxuICAgICAgICByZXF1aXJlZE1lc3NhZ2U6IFwiUGxlYXNlIHNlbGVjdCB0aGUgZGlnaXRhbCBzZXJ2aWNlL3MgeW91IHdhbnQgdXMgdG8gd29yayBvblwiLCAvLyBvbmx5IHdvcmtzIHdoZW4gdXNpbmcgdGhlIGZpcnN0IGNoZWNrYm94IGluIHRoZSBncm91cFxyXG4gICAgICAgIGVycm9yc0NvbnRhaW5lcjogZnVuY3Rpb24gKEZpZWxkKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBzZXJ2aWNlc0NvbnQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGFzc0hhbmRsZXI6IGZ1bmN0aW9uIChGaWVsZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHNlcnZpY2VzQ29udDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pOyovXHJcblxyXG5cclxuICAgICAgLy8gYWN0IHRvIHZhbGlkYXRpb24gZXJyb3JzIGFuZCBzdWNjZXNzIFxyXG5cclxuICAgIGNvbnRhY3RGb3JtLnBhcnNsZXkoKS5vbignZm9ybTplcnJvcicsZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICBhbGVydCgndmFsaWRhdGlvbiBlcnJvcnMnKTsgIFxyXG5cclxuICAgICAgfSkub24oJ2Zvcm06c3VibWl0JyxmdW5jdGlvbihlKXtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnQ29udGFjdCBGb3JtIFN1Ym1pdHRlZCcpO1xyXG5cclxuICAgICAgICAgIC8vIHdyaXRlIGNvZGUgYmVsb3cgIHRvIHN1Ym1pdCB0byBEQiBmb3IgY29udGFjdCBmb3JtXHJcbiAgICAgICAgICAvLyB0aXA6IGNvbnRhY3QgcG9wdXAgaXMgY2FjaGVkIGluIHZhcmlhYmxlIFxyXG4gICAgICAgICAgLy8gYWJvdmUgbGlrZSB0aGlzIGAgdmFyIGNvbnRhY3RQb3B1cCA9ICQoJyNjb250YWN0X19wb3B1cCcpOyBgIFxyXG4gICAgICAgICAgLy8gc28gd2UgY2FuIGZpbmQgdGhlIGZvcm0gZmllbGRzIGxpa2UgdmFyIGZvcm1GaWVsZCA9IGNvbnRhY3RQb3B1cC5maW5kKCdzb21ldGhpbmcnKTtcclxuXHJcbiAgICAgICAgICBcclxuXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7ICBcclxuICAgICAgICAgIFxyXG4gICAgICB9KTtcclxuXHJcblxyXG5cclxuICB9XHJcblxyXG5cclxuXHJcbiAgZnVuY3Rpb24gZ2V0Vmlld3BvcnRCYXNlZEhXKHBlcmNlbnRhZ2UsdW5pdCl7XHJcbiAgICByZXR1cm4gcGVyY2VudGFnZS8xMDAgKiB3aW5kb3dbdW5pdF07XHJcblxyXG4gIH0gLyogZ2V0Vmlld3BvcnRCYXNlZEhXIEVORFMgKi9cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGFwcGx5Vmlld3BvcnRIZWlnaHRzKCl7XHJcbiAgICB2YXIgbF92aWV3cG9ydCA9ICBib2R5LmZpbmQoJy5sLXZpZXdwb3J0Jyk7IFxyXG5cclxuICAgIHZhciB3b3JrX19sb2NrdXAgPSB3b3JrLmZpbmQoJy53b3JrX19sb2NrdXAnKTsgLy8gcXVlcmluZyBmb3IgdXNpbmcgZnVydGhlclxyXG5cclxuICAgIHZhciBvdXRlclNsaWRlciA9ICB3b3JrX19sb2NrdXAuZmluZCgnLm91dGVyLXNsaWRlcicpOyBcclxuXHJcbiAgICB2YXIgaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIgPSAgXHJcbiAgICB3b3JrX19sb2NrdXAuZmluZCgnLmlubmVyLXNsaWRlcl9faXRlbS1pbWFnZS1jb250YWluZXInKTsgXHJcblxyXG5cclxuICAgIGxfdmlld3BvcnQuY3NzKHtcclxuICAgICAgaGVpZ2h0OiAoZ2V0Vmlld3BvcnRCYXNlZEhXKDEwMCwndmgnKSkgKyAncHgnIC8vIGhlaWdodCBuZWVkcyB0byBiZSAxMDB2aFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIG91dGVyU2xpZGVyLmNzcyh7XHJcbiAgICAgIGhlaWdodDogKGdldFZpZXdwb3J0QmFzZWRIVyg3NSwndm1pbicpKSArICdweCcgLy8gaGVpZ2h0IG5lZWRzIHRvIGJlIDc1dm1pblxyXG4gICAgfSk7XHJcblxyXG4gICAgaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIuY3NzKHtcclxuICAgICAgaGVpZ2h0OiAoZ2V0Vmlld3BvcnRCYXNlZEhXKDQwLCd2bWluJykpICsgJ3B4JyAvLyBoZWlnaHQgbmVlZHMgdG8gYmUgNDB2bWluXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBcclxuICAgICAgdXNpbmcgbWluIHdpZHRocyAod2hlbiBkZWZhdWx0IGFyZSBhbHJlYWR5IGFwcGxpZWQgXHJcbiAgICAgIGJ1dCBuZWVkcyB0byBiZSBvdmVyd3JpdHRlbiB3aXRoIGluY3JlYXNpbmcgd2lkdGhzKVxyXG4gICAgKi9cclxuXHJcbiAgICBpZiAodncgPiA3NjcpIHtcclxuICAgICAgaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIuY3NzKHtcclxuICAgICAgICBoZWlnaHQ6IChnZXRWaWV3cG9ydEJhc2VkSFcoMjUsJ3ZtaW4nKSkgKyAncHgnIC8vIGhlaWdodCBuZWVkcyB0byBiZSAyNXZtaW5cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZ3ID4gODk5KSB7XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodncgPiAxMTk5KSB7XHJcbiAgICAgIG91dGVyU2xpZGVyLmNzcyh7XHJcbiAgICAgICAgaGVpZ2h0OiAoZ2V0Vmlld3BvcnRCYXNlZEhXKDU1LCd2bWluJykpICsgJ3B4JyAvLyBoZWlnaHQgbmVlZHMgdG8gYmUgNzV2bWluXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICBcclxuXHJcblxyXG4gICAgLyogdXNpbmcgbWF4IHdpZHRocyovXHJcblxyXG4gICAgaWYgKHZ3IDwgNDAwKSB7XHJcbiAgICAgICAgaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIuY3NzKHtcclxuICAgICAgICAgIGhlaWdodDogKGdldFZpZXdwb3J0QmFzZWRIVygzNSwndm1pbicpKSArICdweCcgLy8gaGVpZ2h0IG5lZWRzIHRvIGJlIDM1dm1pblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIHVzaW5nIG1heCB3aWR0aHMgYW5kIG9yaWVudGF0aW9uKi9cclxuXHJcbiAgICBpZiAodncgPiB2aCkge1xyXG5cclxuICAgICAgaW5uZXJTbGlkZXJJdGVtSW1hZ2VDb250YWluZXIuY3NzKHtcclxuICAgICAgICAnbWluLWhlaWdodCc6ICdhdXRvJyAvLyBoZWlnaHQgbmVlZHMgdG8gYmUgMjV2bWluXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHZ3IDwgMTIwMCAmJiB2dyA+IHZoKSB7XHJcbiAgICAgICAgICBpbm5lclNsaWRlckl0ZW1JbWFnZUNvbnRhaW5lci5jc3Moe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IChnZXRWaWV3cG9ydEJhc2VkSFcoMzAsJ3ZtaW4nKSkgKyAncHgnIC8vIGhlaWdodCBuZWVkcyB0byBiZSAyNXZtaW5cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9IC8qIGFwcGx5Vmlld3BvcnRIZWlnaHRzIEVORFMgKi9cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHNtYWxsU2NyZWVuT3B0aW1pemVyRm9yRm9ybXMoKXtcclxuXHJcbiAgICAgIGZvcm1GaWVsZHMub24oJ2ZvY3VzaW4nLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2ZvY3VzaW4nKTtcclxuICAgICAgICBib2R5LmFkZENsYXNzKCdmb3JtLWZpZWxkLWZvY3VzZWQnKTsgLy8gYWRkIGNsYXNzIG9mIGZvcm0tZmllbGQtZm9jdXNlZCB0byBib2R5XHJcblxyXG4gICAgICAgIGhpcmVXcmFwcGVyLmNzcyh7XHJcbiAgICAgICAgICBtaW5IZWlnaHQ6IGhpcmVXcmFwcGVySGVpZ2h0ICArICdweCdcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGhpcmUub24oJ21vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwnLGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgIGZvcm1GaWVsZHMub24oJ2ZvY3Vzb3V0JyxmdW5jdGlvbigpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmb2N1c291dCcpO1xyXG4gICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoJ2Zvcm0tZmllbGQtZm9jdXNlZCcpOyAvLyBhZGQgY2xhc3Mgb2YgZm9ybS1maWVsZC1mb2N1c2VkIHRvIGJvZHlcclxuXHJcbiAgICAgICAgaGlyZVdyYXBwZXIuY3NzKHtcclxuICAgICAgICAgIG1pbkhlaWdodDogJ2F1dG8nXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGhpcmUub2ZmKCdtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJyk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gICQod2luZG93KS5vbigncmVzaXplJyxmdW5jdGlvbigpe1xyXG5cclxuICAgIHZpZXdwb3J0RGltZW5zaW9ucygpO1xyXG4gICAgYXBwbHlWaWV3cG9ydEhlaWdodHMoKTtcclxuXHJcbiAgfSk7IC8qIG9uIHJlc2l6ZSBFTkRTICovXHJcblxyXG5cclxuICAkKHdpbmRvdykub24oJ2xvYWQnLGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgd2luZG93LmhpcmVXcmFwcGVySGVpZ2h0ID0gaGlyZVdyYXBwZXIuaGVpZ2h0KCk7XHJcbiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuICAgICAgY29uc29sZS5sb2coaGlyZVdyYXBwZXJIZWlnaHQpO1xyXG4gICAgfSwzMDAwKTtcclxuXHJcbiAgfSk7XHJcbiAgXHJcblxyXG4vKiAgaWYgKHR5cGVvZiB0b3VjaHN0YXJ0KSB7XHJcbiAgICBhbGVydCh0cnVlKTtcclxuICB9XHJcblxyXG4gIGlmIChkb2N1bWVudC5jbGljaykge1xyXG4gICAgYWxlcnQoZmFsc2UpO1xyXG4gIH0qL1xyXG4gIFxyXG5cclxuXHJcbiAgb3V0ZXJOYXYoKTtcclxuICBhYm91dFNsaWRlcigpO1xyXG4gIHdvcmtTbGlkZXIoKTtcclxuXHJcbiAgdHJhbnNpdGlvbkxhYmVscygpO1xyXG4gIHNtYWxsU2NyZWVuT3B0aW1pemVyRm9yRm9ybXMoKTtcclxuXHJcbiAgc3RhcnRQcm9qZWN0Rm9ybSgpO1xyXG4gIGNvbnRhY3RGb3JtKCk7XHJcblxyXG4gIGFwcGx5Vmlld3BvcnRIZWlnaHRzKCk7XHJcblxyXG5cclxufSk7XHJcblxyXG4iXX0=
